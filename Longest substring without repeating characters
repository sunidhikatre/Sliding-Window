Use two pointers (i and j) to maintain a sliding window and a map to track the frequency of characters.
Expand the window (j++) while all characters are unique, and update the maximum length when the window size equals the map size.
If the window contains duplicates, shrink it by moving i until all characters are unique again.

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        Map<Character, Integer> map = new HashMap<>();
        int i = 0;
        int j = 0;
        int max=0;

        while(j < s.length()) {

            map.put(s.charAt(j), map.getOrDefault(s.charAt(j), 0) + 1);

            if(map.size() == j-i+1) {
                max = Math.max(max, j-i+1);
                j++;
            } else if(map.size() < j-i+1) {
                while(map.size() < j-i+1) {
                    map.put(s.charAt(i), map.get(s.charAt(i)) - 1);
                    if(map.get(s.charAt(i)) == 0) {
                        map.remove(s.charAt(i));
                    }
                    i++;
                }
                j++;
            }
        }
        return max;
    }
}
